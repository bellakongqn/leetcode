/**
 * 平面上有 n 个点，点的位置用整数坐标表示 points[i] = [xi, yi]。
 * 请你计算访问所有这些点需要的最小时间（以秒为单位）。
你可以按照下面的规则在平面上移动：
每一秒沿水平或者竖直方向移动一个单位长度，
或者跨过对角线（可以看作在一秒内向水平和竖直方向各移动一个单位长度）。
必须按照数组中出现的顺序来访问这些点。
输入：points = [[1,1],[3,4],[-1,0]]
输出：7
解释：一条最佳的访问路径是： [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   
从 [1,1] 到 [3,4] 需要 3 秒 
从 [3,4] 到 [-1,0] 需要 4 秒
一共需要 7 秒

解析：
循环一次路径数组,拿当前位置和下一个位置对比,因为不管是对角线或者按照网格线移动都是一秒,
所以当他们相差的x轴和y轴数值 一致时, 所需时间就随便哪一个都行,反正这是x和y 数值一致, 
然后不一致时就取大那个,这样就得到所需时间了
*/

/**
 * @param {*} points 
 */
var minTimeToVisitAllPoints = function(points) {
    let count = 0
    for(let i =1;i<points.length;i++){
        let step = Math.max(Math.abs(points[i][0]-points[i-1][0]),Math.abs(points[i][1]-points[i-1][1]));
        count+=step; 
    }
    return count;
};